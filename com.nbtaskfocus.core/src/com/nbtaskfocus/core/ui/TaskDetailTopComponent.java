
/*
 * The MIT License
 *
 * Copyright 2011 Tushar Joshi, Nagpur.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */package com.nbtaskfocus.core.ui;

import com.nbtaskfocus.core.ui.nodes.TaskDetailRootNode;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.filesystems.FileObject;
import org.openide.nodes.Node;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.nbtaskfocus.core.ui//TaskDetail//EN",
autostore = false)
@TopComponent.Description(preferredID = "TaskDetailTopComponent",
iconBase = "com/nbtaskfocus/core/ui/resources/task_icon.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "com.nbtaskfocus.core.ui.TaskDetailTopComponent")
@ActionReference(path = "Menu/Window/Task Focus", position = 633)
@TopComponent.OpenActionRegistration(displayName = "#CTL_TaskDetailAction",
preferredID = "TaskDetailTopComponent")
public final class TaskDetailTopComponent 
extends TopComponent 
implements ExplorerManager.Provider, EditorSynchronizable {
    
    private transient final ExplorerManager manager = new ExplorerManager();
    
    private transient final EditorSynchronizationSupport editorSynchronizationSupport;

    public TaskDetailTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(TaskDetailTopComponent.class, "CTL_TaskDetailTopComponent"));
        setToolTipText(NbBundle.getMessage(TaskDetailTopComponent.class, "HINT_TaskDetailTopComponent"));

        manager.setRootContext(new TaskDetailRootNode((BeanTreeView)jScrollPane1));
        setDisplayName (NbBundle.getMessage(TaskDetailTopComponent.class, "TITLE_TaskDetails"));
        
        associateLookup(ExplorerUtils.createLookup(manager, getActionMap()));
        
        editorSynchronizationSupport = new EditorSynchronizationSupport(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new TaskDetailsTreeView(this);

        setLayout(new java.awt.BorderLayout());
        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    } 
    
    @Override
    protected void componentShowing() {
        super.componentShowing();
        editorSynchronizationSupport.startListening();
    }
    
    @Override
    protected void componentHidden() {
        super.componentHidden();
        editorSynchronizationSupport.stopListening();
    }

    @Override
    public void requestActive() {
        super.requestActive();
        jScrollPane1.requestFocusInWindow();
    }

    @Override
    protected void componentActivated() {
        ExplorerUtils.activateActions(manager, true);
    }

    @Override
    protected void componentDeactivated() {
        ExplorerUtils.activateActions(manager, false);
    }
    
    

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return manager;
    }

    @Override
    public TopComponent getTopComponent() {
        return this;
    }

    @Override
    public CustomTreeView getCustomTreeView() {
        return (CustomTreeView)jScrollPane1;
    }

    @Override
    public Node findNode(FileObject objectToSelect) {
        return ((TaskDetailRootNode)manager.getRootContext())
                .findNode(objectToSelect);
    }
    
    private static class TaskDetailsTreeView extends CustomTreeView {
        public TaskDetailsTreeView(ExplorerManager.Provider explorerManagerProvider) {
            super(explorerManagerProvider);
        }
    }
}
